

module part1 where

idfun : (A : U) (a : A) -> A = \(A : U) (a : A) -> a

idfun (A : U) (a : A) : A = a

constfun (A : U) (B : A -> U) (a : A) (y : B a) : A = a

sFun (A : U) (B : A -> U) (C : (x : A) -> B x -> U)
              (g : (x : A) -> (y : B x) -> C x y)
              (f : (x : A) -> B x)
              (x : A) : C x (f x)
              = g x (f x)

data bool = true | false


not : bool -> bool = split
  true -> false
  false -> true

or : bool -> bool -> bool = split
  true -> let constTrue (_ : bool) : bool = b
                where
                b : bool = true
          in constTrue
  false -> split@(bool -> bool) with
    true -> true
    false -> false

Sigma (A : U) (B : A -> U) : U = (x : A) * B x


fst (A : U) (B : A -> U) (p : Sigma A B) : A = p.1
snd (A : U) (B : A -> U) (p : Sigma A B) : B (fst A B p) = p.2

pair (A : U) (B : A -> U) (a : A) (b : B a) : Sigma A B = (a,b)


data nat = zero
         | suc (n : nat)

add (m : nat) : nat -> nat = split
  zero -> m
  suc n -> suc (add m n)

mutual
  even : nat -> bool = split
    zero -> true
    suc n -> odd n

  odd : nat -> bool = split
    zero -> false
    suc n -> even n

mutual
  data V = N | pi (a : V) (b : T a -> V)

  T : V -> U = split
    N -> nat
    pi a b -> (x : T a) -> T (b x)

data list (A : U) = nil
                  | cons (a : A) (l : list A)

head (A : U) (a : A) : list A -> A = split
  nil -> a
  cons x _ -> x

data maybe (A : U) = nothing | just (a : A)

head1 (A : U) : list A -> maybe A = split
  nil -> nothing
  cons x _ -> just x



Path (A : U) (a b : A) : U = PathP (<_> A) a b


refl (A : U) (a : A) : Path A a a = <i> a

truePath : Path bool true true = <i> true


face0 (A : U) (a b : A) (p : Path A a b) : A = p @ 0
face1 (A : U) (a b : A) (p : Path A a b) : A = p @ 1


notK : (b : bool) -> Path bool (not (not b)) b = split
  true -> <i> true
  false -> <i> false


cong (A B : U) (f : A -> B) (a b : A) (p : Path A a b) :
     Path B (f a) (f b) = <i> f (p @ i)


-- Exercise: cong for binary functions
congbin (A B C : U) (f : A -> B -> C) (a a' : A) (b b' : B)
        (p : Path A a a') (q : Path B b b') :
        Path C (f a b) (f a' b') = <i> f (p @ i) (q @ i)

-- We get a short proof of function extensionality using Path types:
funExt (A B : U) (f g : A -> B)
       (p : (x : A) -> Path B (f x) (g x)) :
       Path (A -> B) f g = <i> \(a : A) -> (p a) @ i


-- Exercise: dependent function extensionality
funExt1 (A : U) (B : A -> U) (f g : (x : A) -> B x)
       (p : (x : A) -> Path (B x) (f x) (g x)) :
       Path ((x : A) -> B x) f g = <i> \(a : A) -> (p a @ i)

-- Exercise: function extensionality for binary functions
funExt2 (A B C : U) (f g : A -> B -> C)
       (p : (x : A) (y : B) -> Path C (f x y) (g x y)) :
       Path (A -> B -> C) f g = <i> \(a : A)(b : B) -> (p a b @ i)


compf (f g : bool -> bool) : bool -> bool =
  \(b : bool) -> g (f b)

notK' : Path (bool -> bool) (compf not not) (idfun bool) =
  <i> \(b : bool) -> notK b @ i

evenodd : (n : nat) -> Path bool (even n) (odd (suc n)) = split
  zero -> <i> true
  suc n -> <i> odd n
